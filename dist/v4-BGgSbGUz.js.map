{"version":3,"file":"v4-BGgSbGUz.js","sources":["../node_modules/.pnpm/base-x@4.0.1/node_modules/base-x/src/index.js","../node_modules/.pnpm/bs58@5.0.0/node_modules/bs58/index.js","../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/native.js","../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Find code of next character\n      var charCode = source.charCodeAt(psz)\n            // Base map can not be indexed using char code\n      if (charCode > 255) { return }\n            // Decode character\n      var carry = BASE_MAP[charCode]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"names":["base","ALPHABET","BASE_MAP","j","i","x","xc","BASE","LEADER","FACTOR","iFACTOR","encode","source","zeroes","length","pbegin","pend","size","b58","carry","it1","it2","str","decodeUnsafe","psz","b256","charCode","it3","it4","vch","decode","string","buffer","src","bs58","require$$0","getRandomValues","rnds8","rng","byteToHex","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}